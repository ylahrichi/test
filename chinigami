public static void disableCertificateValidation() {
        // Create a trust manager that does not validate certificate chains
        TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {
            public X509Certificate[] getAcceptedIssuers() { 
                return new X509Certificate[0]; 
            }

            public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {

            }

            public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {

            }
        }
        };
    // Ignore differences between given hostname and certificate hostname
        HostnameVerifier hv = new HostnameVerifier() {
			
			public boolean verify(String arg0, SSLSession arg1) {
				// TODO Auto-generated method stub
				return true;
			}
		};

        // Install the all-trusting trust manager
        try {
            SSLContext sc = SSLContext.getInstance("SSL");
            sc.init(null, trustAllCerts, new SecureRandom());
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
            HttpsURLConnection.setDefaultHostnameVerifier(hv);
        } catch (Exception e) {
            // Do nothing
        }
    }
	
	URL url = new URL(urlWS);
		disableCertificateValidation();
		HttpURLConnection conn = (HttpURLConnection) url.openConnection();
		conn.setDoOutput(true);
		
		conn.setRequestMethod("POST");
		conn.setRequestProperty("Content-Type", "application/json");
		conn.setRequestProperty("Authorization", "Basic d2VidGE6d2VidjJ0YTQ1");
//		conn.setRequestProperty("Authorization", "Basic "+new         String(Base64.encodeBase64((userWS+":"+pwdWS).getBytes())));
		conn.setConnectTimeout(10000); //set timeout to 5 seconds
		
                // ton json ;)
		String input = "{\"key\":\"" + value + "\"}";

		OutputStream os = conn.getOutputStream();
		os.write(input.getBytes());
		os.flush();

		int responseCode = conn.getResponseCode();
	
		if (responseCode == 200) {
		InputStreamReader in = new InputStreamReader(conn.getInputStream());
		BufferedReader br = new BufferedReader(in);
		String output;
		while ((output = br.readLine()) != null) {
			ObjectMapper mapper = new ObjectMapper();
			instanceOfMyClasse = mapper.readValue(output, TaClasse.class);
		}
		
		}
	
